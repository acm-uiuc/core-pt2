{"version":3,"sources":["../../src/routes/auth.js"],"names":["router","post","req","res","email","body","username","password","authService","register","response","Sequelize","ValidationError","status","send","errors","message","token","verify","forgot","reset","login"],"mappings":"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","sourcesContent":["import { Router } from 'express';\nimport isAuth from '../middlewares/isAuth';\nimport attachUser from '../middlewares/attachUser';\nimport roleCheck from '../middlewares/roleCheck';\nimport authService from '../services/authService';\nimport Sequelize from 'sequelize';\nimport models from '../models';\n\nconst router = Router();\n\nrouter.post('/register', async (req, res) => {\n  const email = req.body.email;\n  const username = req.body.username;\n  const password = req.body.password;\n  let response;\n  try {\n    response = await authService.register(email, password, username);\n  } catch (error) {\n    if (error instanceof Sequelize.ValidationError) {\n      return res.status(401).send(error.errors[0].message);\n    }\n    return res.status(401).send(error.message);\n  }\n  return res.send(response);\n});\n\nrouter.post('/verify', async (req, res) => {\n  const token = req.body.token;\n\n  let response;\n  try {\n    response = await authService.verify(token);\n  } catch (error) {\n    if (error instanceof Sequelize.ValidationError) {\n      return res.status(401).send(error.errors[0].message);\n    }\n    return res.status(401).send(error.message);\n  }\n\n  res.send(response);\n});\n\nrouter.post('/forgot', async (req, res) => {\n  const username = req.body.username;\n  let response;\n  try {\n    response = await authService.forgot(username);\n  } catch (error) {\n    res.status(401).send(error.message);\n  }\n  res.send(response);\n});\n\nrouter.post('/reset', async (req, res) => {\n  const password = req.body.password;\n  const token = req.body.token;\n  let response;\n  try {\n    response = await authService.reset(token, password);\n  } catch (error) {\n    res.status(401).send(error.message);\n  }\n  res.send(response);\n});\n\nrouter.post('/login', async (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  let response;\n  try {\n    response = await authService.login(username, password);\n  } catch (error) {\n    return res.status(401).send(error.message);\n  }\n  return res.send(response);\n});\n\nexport default router;\n"],"file":"auth.js"}