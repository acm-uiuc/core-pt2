{"version":3,"sources":["../../src/services/authService.js"],"names":["generateJWT","user","data","id","username","email","signature","process","env","JWT_SECRET","expiration","jwt","sign","expiresIn","authService","generateToken","register","password","validator","isEmail","Error","argon2","hash","hashed","models","User","create","role","userRecord","mailService","sendRegEmail","verify","token","err","decoded","findOne","where","update","updated","forgot","findByLogin","sendResetEmail","reset","login","correctPass"],"mappings":"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","sourcesContent":["import * as argon2 from 'argon2';\nimport * as jwt from 'jsonwebtoken';\nimport models from '../models';\nimport mailService from './mailService';\nimport validator from 'validator';\n\nfunction generateJWT(user) {\n  const data = {\n    id: user.id,\n    username: user.username,\n    email: user.email,\n  };\n\n  const signature = process.env.JWT_SECRET;\n  const expiration = '6h';\n\n  return jwt.sign({ data }, signature, { expiresIn: expiration });\n}\n\nconst authService = {\n  generateToken: (user) => {\n    return generateJWT(user);\n  },\n  register: async (email, password, username) => {\n    if (!validator.isEmail(email)) {\n      throw new Error('Invalid email');\n    }\n    const hashed = await argon2.hash(password);\n    const userRecord = await models.User.create({\n      username,\n      email,\n      password: hashed,\n      role: -1,\n    });\n    try {\n      mailService.sendRegEmail(generateJWT(userRecord));\n    } catch (error) {\n      throw new Error('Something went wrong. Please try again');\n    }\n    return {\n      user: {\n        email: userRecord.email,\n        username: userRecord.username,\n      },\n    };\n  },\n\n  verify: async (token) => {\n    const signature = process.env.JWT_SECRET;\n    let email;\n    jwt.verify(token, signature, function (err, decoded) {\n      if (err) {\n        throw err;\n      }\n      email = decoded.data.email;\n    });\n\n    const user = await models.User.findOne({ where: { email } });\n    if (user.role !== -1) {\n      throw new Error('User already verified');\n    }\n    const updated = await user.update({ role: 0 });\n\n    return {\n      user: {\n        email: updated.email,\n        username: updated.username,\n      },\n      token: generateJWT(updated),\n    };\n  },\n\n  forgot: async (username) => {\n    const userRecord = await models.User.findByLogin(username);\n    if (userRecord) {\n      mailService.sendResetEmail(generateJWT(userRecord));\n    }\n    return {\n      username,\n    };\n  },\n\n  reset: async (token, password) => {\n    const signature = process.env.JWT_SECRET;\n    let email;\n    jwt.verify(token, signature, function (err, decoded) {\n      if (err) {\n        throw err;\n      }\n      email = decoded.data.email;\n    });\n\n    const user = await models.User.findOne({ where: { email } });\n    const hashed = await argon2.hash(password);\n    const updated = await user.update({ password: hashed });\n\n    return {\n      user: {\n        email: updated.email,\n        username: updated.username,\n      },\n      token: generateJWT(updated),\n    };\n  },\n\n  login: async (username, password) => {\n    const userRecord = await models.User.findByLogin(username);\n    if (userRecord.role === -1) {\n      throw new Error('You must verify your account before logging in.');\n    }\n    if (!userRecord) {\n      throw new Error('User not found');\n    } else {\n      const correctPass = await argon2.verify(userRecord.password, password);\n      if (!correctPass) {\n        throw new Error('Incorrect Password');\n      }\n    }\n\n    return {\n      user: {\n        email: userRecord.email,\n        username: userRecord.username,\n      },\n      token: generateJWT(userRecord),\n    };\n  },\n};\n\nexport default authService;\n"],"file":"authService.js"}